{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AlphabetSpinner","findPosition","char","alphabets","indexOf","split","defaultStyle","top","style","spring","this","props","alphabet","val","position","className","map","bitClass","key","React","Component","CharSpinners","spinners","str","i","App","state","stdOut","s","setState","m","setString","bind","RandomizeButton","Math","floor","random","onClick","shuffle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAGMA,E,YACF,aAAc,IAAD,8BACT,+CAIJC,aAAe,SAACC,GACZ,OAAO,EAAKC,UAAUC,QAAQF,IAJ9B,EAAKC,UAAY,6DAA8DE,MAAM,IAF5E,E,sEASJ,IAAD,OACJ,OACI,kBAAC,SAAD,CAAQC,aAAc,CAACC,IAAK,GAAIC,MAAO,CAACD,IAAKE,iBAAOC,KAAKT,aAAaS,KAAKC,MAAMC,cAC5E,SAAAC,GACG,IAAIL,EAAQ,CACRM,SAAU,WACVP,IAAc,GAARM,EAAIN,KAAS,GAEvB,OACI,yBAAKQ,UAAU,OACX,yBAAKP,MAAOA,GACP,EAAKL,UAAUa,KAAI,SAAAd,GAChB,IAAIe,EAAW,WAIf,OAHGf,IAAS,EAAKS,MAAMC,WACnBK,GAAY,YAET,yBAAKC,IAAKhB,EAAMa,UAAWE,GAAWf,e,GA1BnDiB,IAAMC,WAqC9BC,E,YACF,aAAc,uE,sEAIV,IAAIC,EAAWZ,KAAKC,MAAMY,IAAIlB,MAAM,IAAIW,KAAI,SAACJ,EAAUY,GAAX,OAAiB,kBAAC,EAAD,CAAiBN,IAAKM,EAAGZ,SAAUA,OAChG,OACI,yBAAKG,UAAU,UAAUO,O,GAPVH,IAAMC,WAY3BK,E,YACF,aAAc,IAAD,8BACT,+CACKC,MAAQ,CAACC,OAAQ,eAFb,E,uEAKHC,GACNlB,KAAKmB,SAAS,CAACF,OAAQC,M,+BAIvB,OACI,6BACI,yBAAKb,UAAU,WACX,wBAAIA,UAAU,cAAd,cACA,wBAAIA,UAAU,cAAd,sBAEJ,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAAcQ,IAAKb,KAAKgB,MAAMC,UAElC,kBAAC,EAAD,CAAiBG,EAAGpB,KAAKqB,UAAUC,KAAKtB,a,GApBtCS,IAAMC,WA0BlBa,E,kLAWE,MATe,CACX,6BACA,4BACA,+BACA,2BACA,8BAGUC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,O,+BAIpD,OACI,yBAAKpB,UAAU,cACX,4BAAQsB,QAAS3B,KAAKC,MAAMmB,EAAEE,KAAK,KAAMtB,KAAK4B,YAA9C,gB,GAhBcnB,IAAMC,WAuBrBK,ICzFKc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ae2ce8c.chunk.js","sourcesContent":["//base code from https://github.com/vsc-github/react-character-slot-machine\nimport React from 'react';\nimport { Motion, spring, presets } from 'react-motion';\nclass AlphabetSpinner extends React.Component {\n    constructor(){\n        super();\n        this.alphabets = '\\', @-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.'.split('');\n    }\n\n    findPosition = (char) => {\n        return this.alphabets.indexOf(char);\n    }\n\n    render(){\n        return (\n            <Motion defaultStyle={{top: 0}} style={{top: spring(this.findPosition(this.props.alphabet))}}>\n                {val => {\n                    let style = {\n                        position: 'absolute',\n                        top: (val.top*55)*-1\n                    }\n                    return (\n                        <div className=\"bit\">\n                            <div style={style}>\n                                {this.alphabets.map(char => {\n                                    let bitClass = 'bit-char';\n                                    if(char === this.props.alphabet){\n                                        bitClass += ' active '\n                                    }\n                                    return <div key={char} className={bitClass}>{char}</div>\n                                })}\n                            </div>\n                        </div>\n                    )\n                }}\n            </Motion>\n        )\n    }\n}\n\nclass CharSpinners extends React.Component {\n    constructor(){\n        super();\n    }\n    render(){\n        let spinners = this.props.str.split('').map((alphabet, i) => <AlphabetSpinner key={i} alphabet={alphabet} />)\n        return (\n            <div className=\"holder\">{spinners}</div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {stdOut: 'Hello World'}\n    }\n\n    setString(s){\n        this.setState({stdOut: s});\n    }\n\n    render(){\n        return (\n            <div>\n                <div className=\"headers\">\n                    <h1 className=\"white-text\">ecoventure</h1>\n                    <h2 className=\"white-text\">How can you help?</h2>\n                </div>\n                <div className=\"bits\">\n                    <CharSpinners str={this.state.stdOut} />\n                </div>\n                <RandomizeButton m={this.setString.bind(this)} />\n            </div>\n        );\n    }\n}\n\nclass RandomizeButton extends React.Component {\n    shuffle() {\n        let messages = [\n            \"sdsclkf text one svkm sadf\",\n            \"bnvdkx text two xcvirsdfc\",\n            \"gbfowsdwefsd text three rjek\",\n            \"twed text four cxgtlrkds\",\n            \"sdsdgber text five sdiodss\"\n        ];\n\n        let randNum = Math.floor(Math.random() * Math.floor(5));//5 = max \n        return messages[randNum];\n    }\n    render(){\n        return  (\n            <div className=\"bit-inputs\">\n                <button onClick={this.props.m.bind(null, this.shuffle())}>New Tip</button>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}